/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace NFTAave {
  export type PoolStruct = {
    owner: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
    depositedAmount: PromiseOrValue<BigNumberish>;
    borrowedAmount: PromiseOrValue<BigNumberish>;
    availableAmount: PromiseOrValue<BigNumberish>;
    usableAmount: PromiseOrValue<BigNumberish>;
    nftLocked: PromiseOrValue<BigNumberish>;
    totalLiquidations: PromiseOrValue<BigNumberish>;
    totalLoans: PromiseOrValue<BigNumberish>;
    totalInterest: PromiseOrValue<BigNumberish>;
    depositedAt: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
    lastLoanAt: PromiseOrValue<BigNumberish>;
    loanToValue: PromiseOrValue<BigNumberish>;
    maxAmount: PromiseOrValue<BigNumberish>;
    interestType: PromiseOrValue<BigNumberish>;
    interestRate: PromiseOrValue<BigNumberish>;
    maxDuration: PromiseOrValue<BigNumberish>;
    compound: PromiseOrValue<boolean>;
    collections: PromiseOrValue<string>[];
  };

  export type PoolStructOutput = [
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    boolean,
    string[]
  ] & {
    owner: string;
    status: number;
    depositedAmount: BigNumber;
    borrowedAmount: BigNumber;
    availableAmount: BigNumber;
    usableAmount: BigNumber;
    nftLocked: BigNumber;
    totalLiquidations: BigNumber;
    totalLoans: BigNumber;
    totalInterest: BigNumber;
    depositedAt: BigNumber;
    createdAt: BigNumber;
    updatedAt: BigNumber;
    lastLoanAt: BigNumber;
    loanToValue: BigNumber;
    maxAmount: BigNumber;
    interestType: number;
    interestRate: BigNumber;
    maxDuration: BigNumber;
    compound: boolean;
    collections: string[];
  };

  export type AdminSettingStruct = {
    verifiedCollections: PromiseOrValue<string>[];
    feeTo: PromiseOrValue<string>;
    minDepositAmount: PromiseOrValue<BigNumberish>;
  };

  export type AdminSettingStructOutput = [string[], string, BigNumber] & {
    verifiedCollections: string[];
    feeTo: string;
    minDepositAmount: BigNumber;
  };
}

export interface NFTAaveInterface extends utils.Interface {
  functions: {
    "createPool(uint256,uint256,uint8,uint256,uint256,bool,address[])": FunctionFragment;
    "getPoolById(uint256)": FunctionFragment;
    "getPoolByOwner(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolOwners(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalPools()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAdminSetting((address[],address,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createPool"
      | "getPoolById"
      | "getPoolByOwner"
      | "owner"
      | "poolOwners"
      | "renounceOwnership"
      | "totalPools"
      | "transferOwnership"
      | "updateAdminSetting"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolByOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolOwners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdminSetting",
    values: [NFTAave.AdminSettingStruct]
  ): string;

  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdminSetting",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface NFTAave extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTAaveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPool(
      _loanToValue: PromiseOrValue<BigNumberish>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestRate: PromiseOrValue<BigNumberish>,
      _maxDuration: PromiseOrValue<BigNumberish>,
      _compound: PromiseOrValue<boolean>,
      _collections: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPoolById(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[NFTAave.PoolStructOutput]>;

    getPoolByOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NFTAave.PoolStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalPools(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAdminSetting(
      _adminSetting: NFTAave.AdminSettingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createPool(
    _loanToValue: PromiseOrValue<BigNumberish>,
    _maxAmount: PromiseOrValue<BigNumberish>,
    _interestType: PromiseOrValue<BigNumberish>,
    _interestRate: PromiseOrValue<BigNumberish>,
    _maxDuration: PromiseOrValue<BigNumberish>,
    _compound: PromiseOrValue<boolean>,
    _collections: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPoolById(
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NFTAave.PoolStructOutput>;

  getPoolByOwner(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NFTAave.PoolStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolOwners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalPools(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAdminSetting(
    _adminSetting: NFTAave.AdminSettingStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPool(
      _loanToValue: PromiseOrValue<BigNumberish>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestRate: PromiseOrValue<BigNumberish>,
      _maxDuration: PromiseOrValue<BigNumberish>,
      _compound: PromiseOrValue<boolean>,
      _collections: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getPoolById(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NFTAave.PoolStructOutput>;

    getPoolByOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NFTAave.PoolStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalPools(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAdminSetting(
      _adminSetting: NFTAave.AdminSettingStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    createPool(
      _loanToValue: PromiseOrValue<BigNumberish>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestRate: PromiseOrValue<BigNumberish>,
      _maxDuration: PromiseOrValue<BigNumberish>,
      _compound: PromiseOrValue<boolean>,
      _collections: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPoolById(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolByOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalPools(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAdminSetting(
      _adminSetting: NFTAave.AdminSettingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPool(
      _loanToValue: PromiseOrValue<BigNumberish>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _interestType: PromiseOrValue<BigNumberish>,
      _interestRate: PromiseOrValue<BigNumberish>,
      _maxDuration: PromiseOrValue<BigNumberish>,
      _compound: PromiseOrValue<boolean>,
      _collections: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPoolById(
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolByOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolOwners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAdminSetting(
      _adminSetting: NFTAave.AdminSettingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
